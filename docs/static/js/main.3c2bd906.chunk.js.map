{"version":3,"sources":["JSONEditorReact.js","App.js","serviceWorker.js","index.js"],"names":["JSONEditorReact","options","Object","assign","this","props","json","text","jsoneditor","JSONEditor","container","set","setText","schema","cloneDeep","schemaRefs","nextProps","nextState","update","updateText","JSON","stringify","parse","indentation","e","console","log","setMode","mode","schemaChanged","isEqual","schemaRefsChanged","setSchema","destroy","className","ref","elem","Component","title","modes","App","state","onChangeText","setState","onModeChangeSelect","event","target","value","onModeChange","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3c2bd906.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport isEqual from 'lodash/isEqual';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\n\r\nimport JSONEditor from 'jsoneditor';\r\nimport 'jsoneditor/dist/jsoneditor.css';\r\n\r\nimport './JSONEditorReact.css';\r\n\r\nexport default class JSONEditorReact extends Component {\r\n  componentDidMount () {\r\n    // copy all properties into options for the editor\r\n    // (except the properties for the JSONEditorReact component itself)\r\n    const options = Object.assign({}, this.props);\r\n    delete options.json;\r\n    delete options.text;\r\n\r\n    this.jsoneditor = new JSONEditor(this.container, options);\r\n\r\n    if ('json' in this.props) {\r\n      this.jsoneditor.set(this.props.json);\r\n    }\r\n    if ('text' in this.props) {\r\n      this.jsoneditor.setText(this.props.text);\r\n    }\r\n    this.schema = cloneDeep(this.props.schema);\r\n    this.schemaRefs = cloneDeep(this.props.schemaRefs);\r\n  }\r\n\r\n  componentWillUpdate(nextProps, nextState) {\r\n    if ('json' in nextProps) {\r\n      this.jsoneditor.update(nextProps.json);\r\n    }\r\n\r\n    if ('text' in nextProps) {\r\n      try {\r\n        this.jsoneditor.updateText(JSON.stringify(JSON.parse(nextProps.text), null, this.props.indentation));\r\n      } catch (e) {\r\n        console.log('ERROR');\r\n      }\r\n    }\r\n\r\n    if ('mode' in nextProps) {\r\n      this.jsoneditor.setMode(nextProps.mode);\r\n    }\r\n\r\n    // store a clone of the schema to keep track on when it actually changes.\r\n    // (When using a PureComponent all of this would be redundant)\r\n    const schemaChanged = !isEqual(nextProps.schema, this.schema);\r\n    const schemaRefsChanged = !isEqual(nextProps.schemaRefs, this.schemaRefs);\r\n    if (schemaChanged || schemaRefsChanged) {\r\n      this.schema = cloneDeep(nextProps.schema);\r\n      this.schemaRefs = cloneDeep(nextProps.schemaRefs);\r\n      this.jsoneditor.setSchema(nextProps.schema, nextProps.schemaRefs);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    if (this.jsoneditor) {\r\n      this.jsoneditor.destroy();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"jsoneditor-react-container\" ref={elem => this.container = elem} />\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport JSONEditorReact from './JSONEditorReact';\r\nimport './App.css';\r\n\r\nconst schema = {\r\n  title: 'Example Schema'\r\n};\r\n\r\nconst json = {\r\n  'array': [1, 2, 3],\r\n  'boolean': true,\r\n  'null': null,\r\n  'number': 'four',\r\n  'object': {'a': 'b', 'c': 'd'},\r\n  'string': 'Hello World'\r\n};\r\n\r\nconst modes = ['tree', 'form', 'view', 'code', 'text'];\r\n\r\nclass App extends Component {\r\n  state = {\r\n    schema,\r\n    text: JSON.stringify(json, null, 2),\r\n    mode: 'tree'\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <div className=\"contents\">\r\n          <JSONEditorReact\r\n              schema={this.state.schema}\r\n              text={this.state.text}\r\n              mode={modes[3]}\r\n              // modes={modes}\r\n              indentation={4}\r\n              onChangeText={this.onChangeText}\r\n              onModeChange={this.onModeChange}\r\n          />\r\n          <JSONEditorReact\r\n              schema={this.state.schema}\r\n              text={this.state.text}\r\n              mode={modes[0]}\r\n              // modes={modes}\r\n              indentation={4}\r\n              onChangeText={this.onChangeText}\r\n              onModeChange={this.onModeChange}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  onChangeText = (text) => {\r\n    this.setState({ text });\r\n  };\r\n\r\n  onModeChangeSelect = (event) => {\r\n    this.setState({ mode: event.target.value });\r\n  };\r\n\r\n  onModeChange = (mode) => {\r\n    this.setState({ mode });\r\n  };\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}